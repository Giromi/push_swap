!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AR	ft_printf/Makefile	/^AR 				= ar$/;"	m
AR	makefile	/^AR 				= ar$/;"	m
ARFLAGS	ft_printf/Makefile	/^ARFLAGS 		= -rcus$/;"	m
ARFLAGS	libft/Makefile	/^ARFLAGS = rcus $/;"	m
ARFLAGS	makefile	/^ARFLAGS 		= -rcus$/;"	m
BIT_ALL	mandatory/push_swap.h	22;"	d
BIT_INT	mandatory/push_swap.h	21;"	d
BIT_PA	mandatory/push_swap.h	29;"	d
BIT_PB	mandatory/push_swap.h	30;"	d
BIT_RA	mandatory/push_swap.h	25;"	d
BIT_RB	mandatory/push_swap.h	26;"	d
BIT_RR	mandatory/push_swap.h	32;"	d
BIT_RRA	mandatory/push_swap.h	27;"	d
BIT_RRB	mandatory/push_swap.h	28;"	d
BIT_RRR	mandatory/push_swap.h	33;"	d
BIT_SA	mandatory/push_swap.h	23;"	d
BIT_SB	mandatory/push_swap.h	24;"	d
BIT_SS	mandatory/push_swap.h	31;"	d
BONUS_DIR	ft_printf/Makefile	/^BONUS_DIR 		= $/;"	m
BONUS_DIR	makefile	/^BONUS_DIR 		= bonus\/$/;"	m
BONUS_HAD_FILES	ft_printf/Makefile	/^BONUS_HAD_FILES = ft_printf_bonus.h$/;"	m
BONUS_SRCS_FILES	libft/Makefile	/^BONUS_SRCS_FILES = ft_lstnew.c			\\$/;"	m
BONUS_SRC_FILES	ft_printf/Makefile	/^BONUS_SRC_FILES = ft_printf_bonus.c			\\$/;"	m
CC	ft_printf/Makefile	/^CC 				= gcc$/;"	m
CC	libft/Makefile	/^CC = cc$/;"	m
CC	makefile	/^CC 				= cc$/;"	m
CFLAGS	ft_printf/Makefile	/^CFLAGS 			= -Wall -Wextra -Werror -c$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
CFLAGS	makefile	/^CFLAGS 			= -Wall -Wextra -Werror$/;"	m
COMPILE	makefile	/^COMPILE			= -c$/;"	m
CV_BIT_BEGIN	ft_printf/ft_printf.h	48;"	d
CV_C	ft_printf/ft_printf.h	30;"	d
CV_D	ft_printf/ft_printf.h	33;"	d
CV_EXIST	ft_printf/ft_printf.h	29;"	d
CV_I	ft_printf/ft_printf.h	34;"	d
CV_LX	ft_printf/ft_printf.h	37;"	d
CV_P	ft_printf/ft_printf.h	32;"	d
CV_PCT	ft_printf/ft_printf.h	38;"	d
CV_S	ft_printf/ft_printf.h	31;"	d
CV_SET	ft_printf/ft_printf.h	46;"	d
CV_SX	ft_printf/ft_printf.h	36;"	d
CV_U	ft_printf/ft_printf.h	35;"	d
DEC	ft_printf/ft_printf.h	41;"	d
DEC_BASE	ft_printf/ft_printf.h	44;"	d
ERROR	ft_printf/ft_printf.h	51;"	d
ERROR	mandatory/push_swap.h	19;"	d
FAIL_CONV	ft_printf/ft_printf.h	21;"	d
FAIL_INT	ft_printf/ft_printf.h	20;"	d
FG_BIT_BEGIN	ft_printf/ft_printf.h	47;"	d
FG_MINUS	ft_printf/ft_printf.h	23;"	d
FG_PLUS	ft_printf/ft_printf.h	24;"	d
FG_POUND	ft_printf/ft_printf.h	26;"	d
FG_SET	ft_printf/ft_printf.h	45;"	d
FG_SPACE	ft_printf/ft_printf.h	25;"	d
FG_ZERO	ft_printf/ft_printf.h	22;"	d
FINAL_LEN	ft_printf/ft_printf.h	49;"	d
FTPRINTF	makefile	/^FTPRINTF		= libftprintf.a$/;"	m
FTPRINTF_DIR	makefile	/^FTPRINTF_DIR	= ft_printf\/$/;"	m
FT_PRINTF_H	ft_printf/ft_printf.h	14;"	d
FT_PRINTF_HADS	ft_printf/Makefile	/^FT_PRINTF_HADS = $(addprefix $(MANDATORY_DIR), $(HAD_FILES))$/;"	m
FT_PRINTF_HADS_BONUS	ft_printf/Makefile	/^FT_PRINTF_HADS_BONUS = $(addprefix $(BONUS_DIR), $(BONUS_HAD_FILES))$/;"	m
FT_PRINTF_OBJS	ft_printf/Makefile	/^FT_PRINTF_OBJS = $(addprefix $(MANDATORY_DIR), $(SRC_FILES:.c=.o))$/;"	m
FT_PRINTF_OBJS_BONUS	ft_printf/Makefile	/^FT_PRINTF_OBJS_BONUS = $(addprefix $(BONUS_DIR), $(BONUS_SRC_FILES:.c=.o))$/;"	m
HADS	ft_printf/Makefile	/^HADS = $(FT_PRINTF_HADS)$/;"	m
HAD_FILES	ft_printf/Makefile	/^HAD_FILES 		= ft_printf.h$/;"	m
HEX	ft_printf/ft_printf.h	40;"	d
HEX_BASE_LOWER	ft_printf/ft_printf.h	42;"	d
HEX_BASE_UPPER	ft_printf/ft_printf.h	43;"	d
INC	ft_printf/Makefile	/^INC 			= -I$/;"	m
INC	libft/Makefile	/^INC = -I.\/$/;"	m
INC	makefile	/^INC 			= -I$/;"	m
INCLUDES	libft/Makefile	/^INCLUDES = .\/libft.h$/;"	m
LIBFT	ft_printf/Makefile	/^LIBFT 			= libft.a$/;"	m
LIBFT	makefile	/^LIBFT 			=	libft.a$/;"	m
LIBFT_DIR	ft_printf/Makefile	/^LIBFT_DIR 		= ..\/libft\/$/;"	m
LIBFT_DIR	makefile	/^LIBFT_DIR 		=	libft\/$/;"	m
LIBFT_H	ft_printf/Makefile	/^LIBFT_H 		= libft.h$/;"	m
LIBFT_H	libft/libft.h	14;"	d
MAKE_C	ft_printf/Makefile	/^MAKE_C 			= make -C$/;"	m
MAKE_C	makefile	/^MAKE_C 			= make -C$/;"	m
MANDATORY_DIR	ft_printf/Makefile	/^MANDATORY_DIR 	= .\/$/;"	m
MANDATORY_DIR	makefile	/^MANDATORY_DIR 	= mandatory\/$/;"	m
MINITALK_OBJS_BONUS	makefile	/^MINITALK_OBJS_BONUS = $(addprefix $(BONUS_DIR), $(BONUS_SRC_FILES:.c=.o))$/;"	m
NAME	ft_printf/Makefile	/^NAME	 		= libftprintf.a$/;"	m
NAME	libft/Makefile	/^NAME = .\/libft.a$/;"	m
NAME	makefile	/^NAME	 		=	push_swap$/;"	m
OBJS	ft_printf/Makefile	/^OBJS = $(FT_PRINTF_OBJS)$/;"	m
OBJS	libft/Makefile	/^OBJS = $(SRCS:.c=.o)$/;"	m
OBJS	makefile	/^OBJS		=	$(addprefix $(MANDATORY_DIR), $(SRCS:.c=.o))$/;"	m
PC_EXIST	ft_printf/ft_printf.h	28;"	d
PUSH_SWAP_H	mandatory/push_swap.h	13;"	d
RM	ft_printf/Makefile	/^RM 				= rm -vf$/;"	m
RM	libft/Makefile	/^RM = rm -rvf$/;"	m
RM	makefile	/^RM 				= rm -vf$/;"	m
RTN_ERROR	ft_printf/ft_printf.h	53;"	d
RTN_IDX	ft_printf/ft_printf.h	54;"	d
SRCS	libft/Makefile	/^SRCS = $(SRCS_FILES)$/;"	m
SRCS	makefile	/^SRCS			=	push_swap.c						\\$/;"	m
SRCS_FILES	libft/Makefile	/^SRCS_FILES = ft_isalpha.c	\\$/;"	m
SRC_FILES	ft_printf/Makefile	/^SRC_FILES 		= ft_printf.c		\\$/;"	m
SUCCESS	ft_printf/ft_printf.h	52;"	d
SUCCESS	mandatory/push_swap.h	20;"	d
TARGET_DIR	ft_printf/Makefile	/^TARGET_DIR 		= $(MANDATORY_DIR)$/;"	m
TARGET_DIR	makefile	/^TARGET_DIR 		= $(MANDATORY_DIR)$/;"	m
VAL_INT_MAX	mandatory/push_swap.h	35;"	d
VAL_INT_MIN	mandatory/push_swap.h	34;"	d
WD_EXIST	ft_printf/ft_printf.h	27;"	d
after_pct	ft_printf/ft_printf.h	/^	char			*after_pct;$/;"	m	struct:s_pctlst
analysis_pct	ft_printf/analysis_pct.c	/^void	analysis_pct(const char **cur, t_gather *fwp)$/;"	f
av_check	mandatory/push_swap.c	/^int av_check(char **av, t_stack **input)$/;"	f
before_pct	ft_printf/ft_printf.h	/^	char			*before_pct;$/;"	m	struct:s_pctlst
bits	ft_printf/ft_printf.h	/^	int		bits;$/;"	m	struct:s_gather
bring_arg	ft_printf/ft_printf.c	/^static size_t	bring_arg(va_list *ap, int bits)$/;"	f	file:
case_check	mandatory/case_under_five.c	/^int	case_check(t_cursor *head)$/;"	f
check_len_max	ft_printf/ft_printf_utils.c	/^int	check_len_max(int *cnt, int check)$/;"	f
check_len_num_mem	ft_printf/make_pct.c	/^static int	check_len_num_mem(size_t arg, int bits)$/;"	f	file:
check_len_str_char	ft_printf/make_pct.c	/^static int	check_len_str_char(const char *arg)$/;"	f	file:
check_part	mandatory/push_swap.c	/^static int	check_part(char **av, int *num, char *flag)$/;"	f	file:
check_size	libft/ft_strtrim.c	/^static size_t	check_size(char const *s, char const *set, size_t *idx,$/;"	f	file:
cmp_set	libft/ft_strtrim.c	/^static size_t	cmp_set(char const *str, char const *set, size_t set_len)$/;"	f	file:
cnt_a	mandatory/push_swap.h	/^	int	cnt_a;$/;"	m	struct:s_cursor
cnt_b	mandatory/push_swap.h	/^	int	cnt_b;$/;"	m	struct:s_cursor
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_list
convert_num_mem_base	ft_printf/make_num_mem.c	/^static void	convert_num_mem_base(char *dst, size_t arg, int len, int bits)$/;"	f	file:
count_words	libft/ft_split.c	/^static size_t	count_words(char const *str, char c)$/;"	f	file:
cur_a	mandatory/push_swap.h	/^	t_stack *cur_a;$/;"	m	struct:s_cursor
cur_b	mandatory/push_swap.h	/^	t_stack *cur_b;$/;"	m	struct:s_cursor
debug_print	mandatory/push_swap.c	/^void debug_print(t_cursor *head, int choice)$/;"	f
find_conversion	ft_printf/analysis_pct.c	/^static void	find_conversion(const char **cur, int *bits)$/;"	f	file:
find_flags	ft_printf/analysis_pct.c	/^static void	find_flags(const char **cur, int *bits)$/;"	f	file:
find_pct	ft_printf/ft_printf.c	/^static char	*find_pct(const char **cur, int *cnt)$/;"	f	file:
find_width_precision	ft_printf/analysis_pct.c	/^static void	find_width_precision(const char **cur, t_gather *fwp)$/;"	f	file:
ft_atoi	libft/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_charjoin_myself	mandatory/push_swap_command.c	/^static	char	ft_charjoin_myself(t_cursor *head, char c)$/;"	f	file:
ft_charundo	mandatory/push_swap_utils.c	/^void	*ft_charundo(char *s)$/;"	f
ft_counteract	mandatory/push_swap_command_utils.c	/^char	ft_counteract(char *str, int *len, char add)$/;"	f
ft_error_malloc	libft/ft_split.c	/^static char	**ft_error_malloc(char **str, size_t D2_size)$/;"	f	file:
ft_handle_incr	ft_printf/make_num_mem.c	/^static void	ft_handle_incr(char *dst, int bits, int sign)$/;"	f	file:
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isminus	mandatory/push_swap_utils.c	/^int ft_isminus(int c)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_issp	mandatory/push_swap_utils.c	/^int ft_issp(int c)$/;"	f
ft_isspace	libft/ft_atoi.c	/^static	int	ft_isspace(int c)$/;"	f	file:
ft_itoa	libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_lstadd_back	libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstclear	libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstsize	libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_printf	ft_printf/ft_printf.c	/^int	ft_printf(const char *s, ...)$/;"	f
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_simple_atoi	mandatory/ft_simple_atoi.c	/^int	ft_simple_atoi(const char *str)$/;"	f
ft_split	libft/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strchr_idx	ft_printf/ft_printf_utils.c	/^int	ft_strchr_idx(const char *s, int c, int switcher)$/;"	f
ft_strchr_null	mandatory/push_swap_utils.c	/^char	*ft_strchr_null(const char *s, int c)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strjoin_addsp	mandatory/push_swap_utils.c	/^char	*ft_strjoin_addsp(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, char const *src, size_t dstsize)$/;"	f
ft_strlcat_known	mandatory/push_swap_utils.c	/^size_t	ft_strlcat_known(char *dst, size_t dst_len, char const *src,$/;"	f
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, char const *src, size_t dstsize)$/;"	f
ft_strlcpy_known	mandatory/push_swap_utils.c	/^size_t	ft_strlcpy_known(char *dst, char const *src, size_t len$/;"	f
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
full_len	ft_printf/ft_printf.h	/^	int		full_len;$/;"	m	struct:s_gather
full_len_check	ft_printf/ft_printf_utils.c	/^int	full_len_check(t_gather *fwp, int *len)$/;"	f
idx	mandatory/push_swap.h	/^	int		idx;$/;"	m	struct:s_stack
isfg_incr	ft_printf/ft_printf_utils.c	/^int	isfg_incr(t_gather *fwp)$/;"	f
itoa_nbr	libft/ft_itoa.c	/^void	itoa_nbr(int n, char *dst, size_t len)$/;"	f
loop_printf	ft_printf/ft_printf.c	/^static int	loop_printf(const char **cur, va_list *ap, int *cnt, t_pctlst *lst)$/;"	f	file:
lst_clean	mandatory/push_swap_utils.c	/^void lst_clean(t_stack **lst)$/;"	f
main	mandatory/push_swap.c	/^int main(int ac, char *av[])$/;"	f
make_dst	ft_printf/make_num_mem.c	/^static char	*make_dst(size_t arg, int sign, t_gather *fwp, int len)$/;"	f	file:
make_dst	ft_printf/make_pct.c	/^static char	*make_dst(char *str_arg, int bits, int len, int full_len)$/;"	f	file:
make_max	libft/ft_atoi.c	/^static	size_t	make_max(int sign)$/;"	f	file:
make_max	mandatory/ft_simple_atoi.c	/^static	unsigned int	make_max(int sign)$/;"	f	file:
make_num_mem	ft_printf/make_num_mem.c	/^char	*make_num_mem(t_gather *fwp, size_t arg, int *cnt, int len)$/;"	f
make_pct	ft_printf/make_pct.c	/^char	*make_pct(const char *cur, t_gather *fwp, size_t arg, int *cnt)$/;"	f
make_ptr	libft/ft_split.c	/^static char	*make_ptr(char const *str, size_t *j, char c)$/;"	f	file:
make_str_char	ft_printf/make_pct.c	/^static char	*make_str_char(t_gather *fwp, char *arg, int *cnt, int len)$/;"	f	file:
next	libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	mandatory/push_swap.h	/^	struct s_stack *next;$/;"	m	struct:s_stack	typeref:struct:s_stack::s_stack
next_check	mandatory/basic_command.c	/^int	next_check(t_stack *now)$/;"	f
next_check_nspot	mandatory/wall_sorting.c	/^int	next_check_nspot(t_cursor *head, int n, char spot)$/;"	f
num	mandatory/push_swap.h	/^	int		num;$/;"	m	struct:s_stack
order	mandatory/push_swap.h	/^	char *order;$/;"	m	struct:s_cursor
order_print	mandatory/push_swap_utils.c	/^int	order_print(char *result)$/;"	f
pa	mandatory/push_swap.h	/^	int	pa;$/;"	m	struct:s_cnt
pb	mandatory/push_swap.h	/^	int	pb;$/;"	m	struct:s_cnt
pivot_setting	mandatory/quick_sort.c	/^void	pivot_setting(int *pv1, int *pv2, int offset, int n)$/;"	f
plma_check	libft/ft_atoi.c	/^static	int	plma_check(int c, int *sign_ptr)$/;"	f	file:
plma_check	mandatory/ft_simple_atoi.c	/^static	int	plma_check(const char *sign, int *sign_ptr)$/;"	f	file:
precision	ft_printf/ft_printf.h	/^	int		precision;$/;"	m	struct:s_gather
print_lst	ft_printf/ft_printf.c	/^static void	print_lst(t_pctlst *lst, int full_len)$/;"	f	file:
priv	mandatory/push_swap.h	/^	struct s_stack *priv;$/;"	m	struct:s_stack	typeref:struct:s_stack::s_stack
priv_check	mandatory/case_under_five_utils.c	/^int	priv_check(t_stack *now)$/;"	f
priv_check_limit	mandatory/case_under_five_utils.c	/^int	priv_check_limit(t_stack *now, t_stack *first, int delta)$/;"	f
priv_check_swap	mandatory/case_under_five_utils.c	/^int	priv_check_swap(t_stack *now, int swap_cnt)$/;"	f
px	mandatory/push_swap_command.c	/^char	px(t_cursor *head, t_stack *_throw, t_stack *_catch)$/;"	f
ra	mandatory/push_swap.h	/^	int ra;$/;"	m	struct:s_cnt
rb	mandatory/push_swap.h	/^	int rb;$/;"	m	struct:s_cnt
repeat_next	mandatory/basic_command.c	/^t_stack	*repeat_next(t_stack *top, int n)$/;"	f
repeat_priv	mandatory/basic_command.c	/^t_stack	*repeat_priv(t_stack *top, int n)$/;"	f
rrx	mandatory/push_swap_command.c	/^char	rrx(t_cursor *head, t_stack *top)$/;"	f
rx	mandatory/push_swap_command.c	/^char	rx(t_cursor *head, t_stack *top)$/;"	f
s_cnt	mandatory/push_swap.h	/^typedef struct s_cnt$/;"	s
s_cursor	mandatory/push_swap.h	/^typedef struct s_cursor$/;"	s
s_gather	ft_printf/ft_printf.h	/^typedef struct s_gather$/;"	s
s_list	libft/libft.h	/^typedef struct s_list$/;"	s
s_pctlst	ft_printf/ft_printf.h	/^typedef struct s_pctlst$/;"	s
s_stack	mandatory/push_swap.h	/^typedef struct s_stack$/;"	s
salloc_int	ft_printf/ft_printf_utils.c	/^int	salloc_int(char **new, int len, char fill)$/;"	f
solve_conflict	ft_printf/analysis_pct.c	/^static void	solve_conflict(int *bits)$/;"	f	file:
sort_push_method	mandatory/case_under_five.c	/^static char	sort_push_method(t_cursor *head)$/;"	f	file:
sort_rotate_roswap	mandatory/case_under_five.c	/^static int	sort_rotate_roswap(t_cursor *head, char priv_cm)$/;"	f	file:
sort_swap	mandatory/basic_command.c	/^int sort_swap(t_cursor *head, t_stack *top)$/;"	f
sort_swap_b	mandatory/basic_command.c	/^char	sort_swap_b(t_cursor *head)$/;"	f
sort_try_method_four	mandatory/case_under_five.c	/^static int	sort_try_method_four(t_cursor *head)$/;"	f	file:
spot	mandatory/push_swap.h	/^	char	spot;$/;"	m	struct:s_stack
stack_a_to_b	mandatory/quick_sort.c	/^void	stack_a_to_b(t_cursor *head, int offset, int n, int *flag)$/;"	f
stack_b_to_a	mandatory/quick_sort.c	/^void	stack_b_to_a(t_cursor *head, int offset, int n, int *flag)$/;"	f
stack_circle	mandatory/push_swap_utils.c	/^int stack_circle(t_stack **lst)$/;"	f
stack_cut	mandatory/push_swap_utils.c	/^void stack_cut(t_stack **lst)$/;"	f
stack_go_to_top	mandatory/quick_sort.c	/^void	stack_go_to_top(t_cursor *head, int spot, int cnt)$/;"	f
stack_headset	mandatory/push_swap_utils.c	/^void	stack_headset(t_cursor *head, t_stack *first)$/;"	f
stack_is_a_roswap	mandatory/case_under_five_utils.c	/^int	stack_is_a_roswap(t_cursor *head, char priv, int n)$/;"	f
stack_is_a_rotate	mandatory/case_under_five_utils.c	/^int	stack_is_a_rotate(t_cursor *head, char priv, int n)$/;"	f
stack_lstadd_back	mandatory/push_swap_utils.c	/^int	stack_lstadd_back(t_stack **lst, t_stack *new)$/;"	f
stack_lstadd_front	mandatory/push_swap_utils.c	/^int	stack_lstadd_front(t_stack **lst, t_stack *new)$/;"	f
stack_lstfclean	mandatory/push_swap_utils.c	/^void	stack_lstfclean(t_cursor *head)$/;"	f
stack_lstlast	mandatory/push_swap_utils.c	/^t_stack	*stack_lstlast(t_stack *lst, t_stack *new)$/;"	f
stack_lstnew	mandatory/push_swap_utils.c	/^t_stack *stack_lstnew(int num)$/;"	f
stack_pushidx	mandatory/push_swap_command_utils.c	/^int stack_pushidx(t_stack *_throw, t_stack *_catch)$/;"	f
sx	mandatory/push_swap_command.c	/^char	sx(t_cursor *head, t_stack *top)$/;"	f
t_cnt	mandatory/push_swap.h	/^} t_cnt;$/;"	t	typeref:struct:s_cnt
t_cursor	mandatory/push_swap.h	/^} t_cursor;$/;"	t	typeref:struct:s_cursor
t_gather	ft_printf/ft_printf.h	/^}	t_gather;$/;"	t	typeref:struct:s_gather
t_list	libft/libft.h	/^}	t_list;$/;"	t	typeref:struct:s_list
t_pctlst	ft_printf/ft_printf.h	/^}	t_pctlst;$/;"	t	typeref:struct:s_pctlst
t_stack	mandatory/push_swap.h	/^} t_stack;$/;"	t	typeref:struct:s_stack
tmp_idx	mandatory/push_swap.h	/^	int		tmp_idx;$/;"	m	struct:s_stack
wall_a_sort_five	mandatory/wall_sorting.c	/^void wall_a_sort_five(t_cursor *head, char spot)$/;"	f
wall_a_sort_four	mandatory/wall_sorting.c	/^void wall_a_sort_four(t_cursor *head, char spot)$/;"	f
wall_b_sort_five	mandatory/wall_sorting.c	/^void wall_b_sort_five(t_cursor *head, char spot)$/;"	f
wall_b_sort_four	mandatory/wall_sorting.c	/^void wall_b_sort_four(t_cursor *head, char spot)$/;"	f
wall_check_stack	mandatory/wall_sorting.c	/^int wall_check_stack(t_cursor *head, int n, char spot)$/;"	f
wall_sort_three	mandatory/wall_sorting.c	/^int wall_sort_three(t_cursor *head, char spot)$/;"	f
wall_sort_two	mandatory/wall_sorting.c	/^int	wall_sort_two(t_cursor *head, char spot)$/;"	f
where_idx_n	mandatory/wall_sorting.c	/^int where_idx_n(t_cursor *head, int n, char spot)$/;"	f
whether_a_b	mandatory/push_swap_utils.c	/^void whether_a_b(char c)$/;"	f
width	ft_printf/ft_printf.h	/^	int		width;$/;"	m	struct:s_gather
