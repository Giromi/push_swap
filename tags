!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AR	Makefile	/^AR 				= ar$/;"	m
AR	ft_printf/Makefile	/^AR 				= ar$/;"	m
ARFLAGS	Makefile	/^ARFLAGS 		= -rcus$/;"	m
ARFLAGS	ft_printf/Makefile	/^ARFLAGS 		= -rcus$/;"	m
ARFLAGS	libft/Makefile	/^ARFLAGS = rcus $/;"	m
BONUS_DIR	Makefile	/^BONUS_DIR 		= bonus\/$/;"	m
BONUS_DIR	ft_printf/Makefile	/^BONUS_DIR 		= $/;"	m
BONUS_HAD_FILES	ft_printf/Makefile	/^BONUS_HAD_FILES = ft_printf_bonus.h$/;"	m
BONUS_SRCS_FILES	libft/Makefile	/^BONUS_SRCS_FILES = ft_lstnew.c			\\$/;"	m
BONUS_SRC_FILES	ft_printf/Makefile	/^BONUS_SRC_FILES = ft_printf_bonus.c			\\$/;"	m
CC	Makefile	/^CC 				= cc$/;"	m
CC	ft_printf/Makefile	/^CC 				= gcc$/;"	m
CC	libft/Makefile	/^CC = cc$/;"	m
CFLAGS	Makefile	/^CFLAGS 			= -Wall -Wextra -Werror$/;"	m
CFLAGS	ft_printf/Makefile	/^CFLAGS 			= -Wall -Wextra -Werror -c$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
COMPILE	Makefile	/^COMPILE			= -c$/;"	m
CV_BIT_BEGIN	ft_printf/ft_printf.h	48;"	d
CV_C	ft_printf/ft_printf.h	30;"	d
CV_D	ft_printf/ft_printf.h	33;"	d
CV_EXIST	ft_printf/ft_printf.h	29;"	d
CV_I	ft_printf/ft_printf.h	34;"	d
CV_LX	ft_printf/ft_printf.h	37;"	d
CV_P	ft_printf/ft_printf.h	32;"	d
CV_PCT	ft_printf/ft_printf.h	38;"	d
CV_S	ft_printf/ft_printf.h	31;"	d
CV_SET	ft_printf/ft_printf.h	46;"	d
CV_SX	ft_printf/ft_printf.h	36;"	d
CV_U	ft_printf/ft_printf.h	35;"	d
DEC	ft_printf/ft_printf.h	41;"	d
DEC_BASE	ft_printf/ft_printf.h	44;"	d
ERROR	ft_printf/ft_printf.h	51;"	d
ERROR	mandatory/push_swap.h	18;"	d
FAIL_CONV	ft_printf/ft_printf.h	21;"	d
FAIL_INT	ft_printf/ft_printf.h	20;"	d
FG_BIT_BEGIN	ft_printf/ft_printf.h	47;"	d
FG_MINUS	ft_printf/ft_printf.h	23;"	d
FG_PLUS	ft_printf/ft_printf.h	24;"	d
FG_POUND	ft_printf/ft_printf.h	26;"	d
FG_SET	ft_printf/ft_printf.h	45;"	d
FG_SPACE	ft_printf/ft_printf.h	25;"	d
FG_ZERO	ft_printf/ft_printf.h	22;"	d
FINAL_LEN	ft_printf/ft_printf.h	49;"	d
FTPRINTF	Makefile	/^FTPRINTF		= libftprintf.a$/;"	m
FTPRINTF_DIR	Makefile	/^FTPRINTF_DIR	= ft_printf\/$/;"	m
FT_PRINTF_H	ft_printf/ft_printf.h	14;"	d
FT_PRINTF_HADS	ft_printf/Makefile	/^FT_PRINTF_HADS = $(addprefix $(MANDATORY_DIR), $(HAD_FILES))$/;"	m
FT_PRINTF_HADS_BONUS	ft_printf/Makefile	/^FT_PRINTF_HADS_BONUS = $(addprefix $(BONUS_DIR), $(BONUS_HAD_FILES))$/;"	m
FT_PRINTF_OBJS	ft_printf/Makefile	/^FT_PRINTF_OBJS = $(addprefix $(MANDATORY_DIR), $(SRC_FILES:.c=.o))$/;"	m
FT_PRINTF_OBJS_BONUS	ft_printf/Makefile	/^FT_PRINTF_OBJS_BONUS = $(addprefix $(BONUS_DIR), $(BONUS_SRC_FILES:.c=.o))$/;"	m
HADS	ft_printf/Makefile	/^HADS = $(FT_PRINTF_HADS)$/;"	m
HAD_FILES	ft_printf/Makefile	/^HAD_FILES 		= ft_printf.h$/;"	m
HEX	ft_printf/ft_printf.h	40;"	d
HEX_BASE_LOWER	ft_printf/ft_printf.h	42;"	d
HEX_BASE_UPPER	ft_printf/ft_printf.h	43;"	d
INC	Makefile	/^INC 			= -I$/;"	m
INC	ft_printf/Makefile	/^INC 			= -I$/;"	m
INC	libft/Makefile	/^INC = -I.\/$/;"	m
INCLUDES	libft/Makefile	/^INCLUDES = .\/libft.h$/;"	m
LIBFT	Makefile	/^LIBFT 			=	libft.a$/;"	m
LIBFT	ft_printf/Makefile	/^LIBFT 			= libft.a$/;"	m
LIBFT_DIR	Makefile	/^LIBFT_DIR 		=	libft\/$/;"	m
LIBFT_DIR	ft_printf/Makefile	/^LIBFT_DIR 		= ..\/libft\/$/;"	m
LIBFT_H	ft_printf/Makefile	/^LIBFT_H 		= libft.h$/;"	m
LIBFT_H	libft/libft.h	14;"	d
MAKE_C	Makefile	/^MAKE_C 			= make -C$/;"	m
MAKE_C	ft_printf/Makefile	/^MAKE_C 			= make -C$/;"	m
MANDATORY_DIR	Makefile	/^MANDATORY_DIR 	= mandatory\/$/;"	m
MANDATORY_DIR	ft_printf/Makefile	/^MANDATORY_DIR 	= .\/$/;"	m
NAME	Makefile	/^NAME	 		=	$(SEND_OUT) $(RECEIVE_OUT)$/;"	m
NAME	ft_printf/Makefile	/^NAME	 		= libftprintf.a$/;"	m
NAME	libft/Makefile	/^NAME = .\/libft.a$/;"	m
OBJS	ft_printf/Makefile	/^OBJS = $(FT_PRINTF_OBJS)$/;"	m
OBJS	libft/Makefile	/^OBJS = $(SRCS:.c=.o)$/;"	m
PC_EXIST	ft_printf/ft_printf.h	28;"	d
PUSH_SWAP_H	mandatory/push_swap.h	14;"	d
RECEIVE_OBJS	Makefile	/^RECEIVE_OBJS	=	$(addprefix $(MANDATORY_DIR), $(RECEIVE_SRCS:.c=.o))$/;"	m
RECEIVE_OUT	Makefile	/^RECEIVE_OUT		=	server$/;"	m
RECEIVE_SRCS	Makefile	/^RECEIVE_SRCS		=	receiver.c$/;"	m
RECEIVE_SRCS_BONUS	Makefile	/^RECEIVE_SRCS_BONUS	=	receiver_bonus.c$/;"	m
RM	Makefile	/^RM 				= rm -vf$/;"	m
RM	ft_printf/Makefile	/^RM 				= rm -vf$/;"	m
RM	libft/Makefile	/^RM = rm -rvf$/;"	m
RTN_ERROR	ft_printf/ft_printf.h	53;"	d
RTN_IDX	ft_printf/ft_printf.h	54;"	d
SEND_OBJS	Makefile	/^SEND_OBJS		=	$(addprefix $(MANDATORY_DIR), $(SEND_SRCS:.c=.o))$/;"	m
SEND_OUT	Makefile	/^SEND_OUT		=	client$/;"	m
SEND_SRCS	Makefile	/^SEND_SRCS			=	sender.c$/;"	m
SEND_SRCS_BONUS	Makefile	/^SEND_SRCS_BONUS		=	sender_bonus.c$/;"	m
SRCS	libft/Makefile	/^SRCS = $(SRCS_FILES)$/;"	m
SRCS_FILES	libft/Makefile	/^SRCS_FILES = ft_isalpha.c	\\$/;"	m
SRC_DIR	Makefile	/^SRC_DIR				=	srcs\/$/;"	m
SRC_FILES	ft_printf/Makefile	/^SRC_FILES 		= ft_printf.c		\\$/;"	m
SUCCESS	ft_printf/ft_printf.h	52;"	d
TARGET_DIR	Makefile	/^TARGET_DIR 		= $(MANDATORY_DIR)$/;"	m
TARGET_DIR	ft_printf/Makefile	/^TARGET_DIR 		= $(MANDATORY_DIR)$/;"	m
WD_EXIST	ft_printf/ft_printf.h	27;"	d
after_pct	ft_printf/ft_printf.h	/^	char			*after_pct;$/;"	m	struct:s_pctlst
analysis_pct	ft_printf/analysis_pct.c	/^void	analysis_pct(const char **cur, t_gather *fwp)$/;"	f
av_check	mandatory/push_swap.c	/^int av_check(char **input)$/;"	f
av_check	visualization/exec.c	/^int av_check(char **split_av)$/;"	f
av_check	visualization/exec2.c	/^int av_check(char **av, t_stack **input)$/;"	f
before_pct	ft_printf/ft_printf.h	/^	char			*before_pct;$/;"	m	struct:s_pctlst
bits	ft_printf/ft_printf.h	/^	int		bits;$/;"	m	struct:s_gather
bring_arg	ft_printf/ft_printf.c	/^static size_t	bring_arg(va_list *ap, int bits)$/;"	f	file:
check_len_max	ft_printf/ft_printf_utils.c	/^int	check_len_max(int *cnt, int check)$/;"	f
check_len_num_mem	ft_printf/make_pct.c	/^static int	check_len_num_mem(size_t arg, int bits)$/;"	f	file:
check_len_str_char	ft_printf/make_pct.c	/^static int	check_len_str_char(const char *arg)$/;"	f	file:
check_size	libft/ft_strtrim.c	/^static size_t	check_size(char const *s, char const *set, size_t *idx,$/;"	f	file:
cmp_set	libft/ft_strtrim.c	/^static size_t	cmp_set(char const *str, char const *set, size_t set_len)$/;"	f	file:
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_list
convert_num_mem_base	ft_printf/make_num_mem.c	/^static void	convert_num_mem_base(char *dst, size_t arg, int len, int bits)$/;"	f	file:
count_words	libft/ft_split.c	/^static size_t	count_words(char const *str, char c)$/;"	f	file:
cur_a	mandatory/push_swap.h	/^	t_stack *cur_a;$/;"	m	struct:s_cursor
cur_b	mandatory/push_swap.h	/^	t_stack *cur_b;$/;"	m	struct:s_cursor
find_conversion	ft_printf/analysis_pct.c	/^static void	find_conversion(const char **cur, int *bits)$/;"	f	file:
find_flags	ft_printf/analysis_pct.c	/^static void	find_flags(const char **cur, int *bits)$/;"	f	file:
find_pct	ft_printf/ft_printf.c	/^static char	*find_pct(const char **cur, int *cnt)$/;"	f	file:
find_width_precision	ft_printf/analysis_pct.c	/^static void	find_width_precision(const char **cur, t_gather *fwp)$/;"	f	file:
ft_atoi	libft/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_error_malloc	libft/ft_split.c	/^static char	**ft_error_malloc(char **str, size_t D2_size)$/;"	f	file:
ft_handle_incr	ft_printf/make_num_mem.c	/^static void	ft_handle_incr(char *dst, int bits, int sign)$/;"	f	file:
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isminus	visualization/exec_utils.c	/^int ft_isminus(int c)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_issp	visualization/exec_utils.c	/^int ft_issp(int c)$/;"	f
ft_isspace	libft/ft_atoi.c	/^static	int	ft_isspace(int c)$/;"	f	file:
ft_isspace	mandatory/push_swap_utils.c	/^int ft_isspace(int c)$/;"	f
ft_itoa	libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_lstadd_back	libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstclear	libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstsize	libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_printf	ft_printf/ft_printf.c	/^int	ft_printf(const char *s, ...)$/;"	f
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_split	libft/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f
ft_stack_lstnew	mandatory/push_swap_utils.c	/^t_stack *ft_stack_lstnew(int num)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strchr_idx	ft_printf/ft_printf_utils.c	/^int	ft_strchr_idx(const char *s, int c, int switcher)$/;"	f
ft_strchr_null	visualization/exec_utils.c	/^char	*ft_strchr_null(const char *s, int c)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strjoin_addsp	visualization/exec_utils.c	/^char	*ft_strjoin_addsp(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, char const *src, size_t dstsize)$/;"	f
ft_strlcat_known	visualization/exec_utils.c	/^size_t	ft_strlcat_known(char *dst, size_t dst_len, char const *src,$/;"	f
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, char const *src, size_t dstsize)$/;"	f
ft_strlcpy_known	visualization/exec_utils.c	/^size_t	ft_strlcpy_known(char *dst, char const *src, size_t len$/;"	f
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
full_clean	visualization/exec_utils.c	/^void full_clean(char **array)$/;"	f
full_len	ft_printf/ft_printf.h	/^	int		full_len;$/;"	m	struct:s_gather
full_len_check	ft_printf/ft_printf_utils.c	/^int	full_len_check(t_gather *fwp, int *len)$/;"	f
idx	mandatory/push_swap.h	/^	int idx;$/;"	m	struct:s_stack
isfg_incr	ft_printf/ft_printf_utils.c	/^int	isfg_incr(t_gather *fwp)$/;"	f
itoa_nbr	libft/ft_itoa.c	/^void	itoa_nbr(int n, char *dst, size_t len)$/;"	f
line_av	visualization/exec.c	/^char	**line_av(char **av)$/;"	f
loop_printf	ft_printf/ft_printf.c	/^static int	loop_printf(const char **cur, va_list *ap, int *cnt, t_pctlst *lst)$/;"	f	file:
lst_clean	visualization/exec_utils.c	/^void lst_clean(t_stack **lst)$/;"	f
main	main.c	/^int	main(int ac, char *av[])$/;"	f
main	mandatory/push_swap.c	/^int	main(int ac, char *av[])$/;"	f
main	test.c	/^int	main(void)$/;"	f
main	visualization/exec.c	/^int main(int ac, char *av[])$/;"	f
main	visualization/exec2.c	/^int main(int ac, char *av[])$/;"	f
main	visualization/test.c	/^int	main(void)$/;"	f
make_dst	ft_printf/make_num_mem.c	/^static char	*make_dst(size_t arg, int sign, t_gather *fwp, int len)$/;"	f	file:
make_dst	ft_printf/make_pct.c	/^static char	*make_dst(char *str_arg, int bits, int len, int full_len)$/;"	f	file:
make_max	libft/ft_atoi.c	/^static	size_t	make_max(int sign)$/;"	f	file:
make_num_mem	ft_printf/make_num_mem.c	/^char	*make_num_mem(t_gather *fwp, size_t arg, int *cnt, int len)$/;"	f
make_pct	ft_printf/make_pct.c	/^char	*make_pct(const char *cur, t_gather *fwp, size_t arg, int *cnt)$/;"	f
make_ptr	libft/ft_split.c	/^static char	*make_ptr(char const *str, size_t *j, char c)$/;"	f	file:
make_str_char	ft_printf/make_pct.c	/^static char	*make_str_char(t_gather *fwp, char *arg, int *cnt, int len)$/;"	f	file:
next	libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	mandatory/push_swap.h	/^	struct s_stack *next;$/;"	m	struct:s_stack	typeref:struct:s_stack::s_stack
nord_list	mandatory/push_swap.c	/^int nord_list(char *av)$/;"	f
num	mandatory/push_swap.h	/^	int num;$/;"	m	struct:s_stack
pa	visualization/exec_utils.c	/^void pa(t_cursor *head)$/;"	f
pb	visualization/exec_utils.c	/^void pb(t_cursor *head)$/;"	f
plma_check	libft/ft_atoi.c	/^static	int	plma_check(int c, int *sign_ptr)$/;"	f	file:
precision	ft_printf/ft_printf.h	/^	int		precision;$/;"	m	struct:s_gather
print_lst	ft_printf/ft_printf.c	/^static void	print_lst(t_pctlst *lst, int full_len)$/;"	f	file:
priv	mandatory/push_swap.h	/^	struct s_stack *priv;$/;"	m	struct:s_stack	typeref:struct:s_stack::s_stack
ra	visualization/exec_utils.c	/^void ra(t_cursor *head)$/;"	f
rb	visualization/exec_utils.c	/^void rb(t_cursor *head)$/;"	f
rr	visualization/exec_utils.c	/^void rr(t_cursor *head)$/;"	f
rra	visualization/exec_utils.c	/^void rra(t_cursor *head)$/;"	f
rrb	visualization/exec_utils.c	/^void rrb(t_cursor *head)$/;"	f
rrr	visualization/exec_utils.c	/^void rrr(t_cursor *head)$/;"	f
s_cursor	mandatory/push_swap.h	/^typedef struct s_cursor$/;"	s
s_gather	ft_printf/ft_printf.h	/^typedef struct s_gather$/;"	s
s_list	libft/libft.h	/^typedef struct s_list$/;"	s
s_pctlst	ft_printf/ft_printf.h	/^typedef struct s_pctlst$/;"	s
s_stack	mandatory/push_swap.h	/^typedef struct s_stack$/;"	s
sa	visualization/exec_utils.c	/^void sa(t_cursor *head)$/;"	f
salloc_int	ft_printf/ft_printf_utils.c	/^int	salloc_int(char **new, int len, char fill)$/;"	f
solve_conflict	ft_printf/analysis_pct.c	/^static void	solve_conflict(int *bits)$/;"	f	file:
stack_circle	visualization/exec_utils.c	/^void stack_circle(t_stack **lst)$/;"	f
stack_cut	visualization/exec_utils.c	/^void stack_cut(t_stack **lst)$/;"	f
stack_lstadd_back	visualization/exec_utils.c	/^int	stack_lstadd_back(t_stack **lst, t_stack *new)$/;"	f
stack_lstadd_front	visualization/exec_utils.c	/^int	stack_lstadd_front(t_stack **lst, t_stack *new)$/;"	f
stack_lstfclean	visualization/exec_utils.c	/^void	stack_lstfclean(t_cursor *head)$/;"	f
stack_lstlast	visualization/exec_utils.c	/^t_stack	*stack_lstlast(t_stack *lst, int check)$/;"	f
stack_lstnew	visualization/exec_utils.c	/^t_stack *stack_lstnew(int num)$/;"	f
t_cursor	mandatory/push_swap.h	/^} t_cursor;$/;"	t	typeref:struct:s_cursor
t_gather	ft_printf/ft_printf.h	/^}	t_gather;$/;"	t	typeref:struct:s_gather
t_list	libft/libft.h	/^}	t_list;$/;"	t	typeref:struct:s_list
t_pctlst	ft_printf/ft_printf.h	/^}	t_pctlst;$/;"	t	typeref:struct:s_pctlst
t_stack	mandatory/push_swap.h	/^} t_stack;$/;"	t	typeref:struct:s_stack
two_input	mandatory/push_swap.c	/^int	two_input(nord *first)$/;"	f
width	ft_printf/ft_printf.h	/^	int		width;$/;"	m	struct:s_gather
